#!/bin/bash

# this is a post install setup script
# install the base packages for
#  joining the domain
#  managing selinux via policycoreutils
# join the server to the domain

# Notes to myself on using set and trap and etc since I don't fully understand why/where/when
# http://mywiki.wooledge.org/BashFAQ/105
# "https://stackoverflow.com/questions/35800082/how-to-trap-err-when-using-set-e-in-bash"
# set -E
trap '[ "$?" -ne 77 ] || exit 77' ERR

clear
printf "\n"
if [ "$(whoami)" != 'root' ]
  then
    echo "You will not be able to run $0 as non-root user."
    exit 77
fi

echo "Checking to make sure none of these packages are already installed."

pkg1=$(rpm -qa | grep pkg1)
pkg2=$(rpm -qa | grep pkg2)
pkg3=$(rpm -qa | grep ^pkg3\\S[0-9])
pkg4=$(rpm -qa | grep pkg4)
pkg5=$(rpm -qa | grep pkg5)
pkg6=$(rpm -qa | grep pkg6)
pkg7=$(rpm -qa | grep pkg7)
pkg8=$(rpm -qa | grep pkg8)
pkg8=$(rpm -qa | grep pkg9)
pkg9=$(rpm -qa | grep pkg10)
TEMPFILE=/tmp/$$.tmp
echo 0 > $TEMPFILE

echo "Here are the installation statuses:"
COUNTER=0
INSTALLED=0
while [ $COUNTER -ne 10 ]; do
  if [ $(rpm -qa | grep pkg1) ]
    then
      echo "pkg1 version: $pkg1"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg1 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg2) ]
    then
      echo "pgk2 version: $pkg2"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg2 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep ^pkg3\\S[0-9]) ]
    then
      echo "pkg3 version: $pkg3"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg3 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg4) ]
    then
      echo "pkg4 version: $pkg4"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg4 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg5) ]
    then
      echo "pkg5 version: $pkg5"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg5 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg6) ]
    then
      echo "pkg6 version: $pkg6"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg6 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg7) ]
    then
      echo "pkg7 version: $pkg7"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg7 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg8) ]
    then
      echo "pkg8 version: $pkg8"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg8 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg9) ]
    then
      echo "pkg9 version: $pkg9"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg9 not installed"
  fi
  let COUNTER++
  echo ""
  if [ $(rpm -qa | grep pkg10) ]
    then
      echo "pkg10 version: $pkg10"
      INSTALLED=$[$(cat $TEMPFILE) + 1]
      echo $INSTALLED > $TEMPFILE
    else
      echo "pkg10 not installed"
  fi
  let COUNTER++
  echo ""
done

if [ $(cat $TEMPFILE) -eq 0 ]
  then
    echo "No packages installed, continuing..."
  else
    echo "You have $(cat $TEMPFILE) packages already installed."
    # Why am I exiting here, and why am I forcing (myself) to manually install things?
    # The better thing to do here, would be to install what is missing
    # Add some prompting perhaps, or fully automate
    # Automate is better than interactive for something like this, I did it in other scripts...
    # However, this one is currently interactive due to prompting for Admin credentials
	# Possibly even add version checking (what's newest available vs what is installed if 
	# a package was already installed...
    echo "You're going to need to manually do this."
    exit 77
fi

echo ""
echo "Installing packages to join the domain..."
# This could be a good spot to insert the automation
# Only install what isn't already installed
# Look at checking for updates and updating what isn't
yum install pkg1 pkg2 pkg3 pkg4 pkg5 pkg6 pkg7 pkg8 pkg9 pkg10 -y

echo ""
echo "Now to join the domain..."
echo ""
COUNT=0
while [ $COUNT -ne 1 ]; do
  read -p "Please type out the account you would like to use:" domjoin
  echo "The account you typed is:"
  echo "$domjoin"
  echo ""
  echo "Did you enter the correct account?"
  echo ""
  read -p " Continue?(Y/N/Q) " scriptstart
  echo ""

  case $scriptstart in
  [yY])
    echo "Alright, let's go!"
    echo "Get ready to enter the password when prompted!"
    COUNT=1
    ;;
  [nN])
    echo "Try again."
    COUNT=0
    ;;
  [qQ])
    echo "Quitting."
    COUNT=0
    exit 77
    ;;
  *)
    echo "I'm sorry, but you did not respond appropriately."
    echo "I'll blame the keyboard, for now."
    echo "Next time, I'm blaming the interface between"
    echo "the keyboard and the chair."
    COUNT=0
    ;;
  esac
done

realm join --user=$domjoin DOMAIN.TLD

if [ -f /etc/sssd/sssd.conf ]
  then
    sed -i 's/use_fully_qualified_names = True/use_fully_qualified_names = False/' /etc/sssd/sssd.conf
    sed -i 's|fallback_homedir = /home/%u@%d|fallback_homedir = /home/%u|' /etc/sssd/sssd.conf
    sed -i 's/access_provider = ad/access_provider = simple/' /etc/sssd/sssd.conf
    printf "simple_allow_groups = GROUPNAME" >> /etc/sssd/sssd.conf
  else
    echo "I couldn't find /etc/sssd/sssd.conf"
    echo "You'll want to look into that."
    echo "Fix it after creating/finding it."
    read -p "Press ENTER to continue..." CONTINUE
fi

# Here's a better way for me to mess with sudoers and sudoers.d files without potentially breaking sudo
# Check out https://stackoverflow.com/questions/323957/how-do-i-edit-etc-sudoers-from-a-script
#if [ -z "$1" ]; then
#  echo "Starting up visudo with this script as first parameter"
#  export EDITOR=$0 && sudo -E visudo
#else
#  echo "Changing sudoers"
#  echo "# Dummy change to sudoers" >> $1
#fi
GROUPNAME=/etc/sudoers.d/GROUPNAME
if [ -f $GROUPNAME ]
  then
    echo "Hey, there's already a sudoers file for GROUPNAME!"
    echo "I'll check consistency for you."
    if [ $(visudo -c -f $GROUPNAME)]
      then
        echo "Visudo says the file checks out."
      else
        echo "Visudo didn't like something about $GROUPNAME"
        echo "Sudo might be broken until that is fixed."
    fi
  else
    echo "Creating sudoers file for GROUPNAME"
    read -d '' SUDOERS <<"EOF"
# Cmnd alias specification

# User privilege specification
%GROUPNAME ALL=(ALL) ALL
EOF
    echo "${SUDOERS}" | tee $GROUPNAME
fi
systemctl restart pkg1

# Maybe consider doing some LDAP lookups or something to verify things?
