# Get Groups with admin in the name
# Get the members of those groups
# Output to STDOUT
# Probably could use 
foreach ($i in (get-adgroup -filter 'name -like "*admin*"' -properties *)) {write-host Name: $i.name; write-host DistinguishedName: $i; write-host Description: $i.description; write-host Members:; get-adgroupmember $i | select samaccountname,name,objectclass | ft -AutoSize; write-host}

# From http://superuser.com/questions/333733/how-can-i-tell-which-domain-controller-im-authenticated-to
# To determine computer/server DC use NLTEST
nltest /dsgetdc:<domain_name>

# To list all DC's with their appropriate site, try
nltest /dclist:<domain_name>

# You don't have to use the FQDN of the domain name or server
# For example, instead of saying
/dclist:services.microsoft.com
# You can simply type
/dclist:services
# as long as you are an authenticated member of that domain

# For user authentication and group policy use LOGONSERVER variable
echo %logonserver%

# Execution Policy
#Set-ExecutionPolicy -Scope process -ExecutionPolicy RemoteSigned

# YES MFA Connect to Exchange
# Launch Microsoft Exchange Online Powershell Module (requires download)
# https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps
#Connect-EXOPSSession -UserPrincipalName <UPN>
# I suppose could try using $Session = Connect-EXOPSSession -UserPrincipalName <UPN>
# Makes it easier to Remove-PSSession via $Session rather than getting the -Id

# YES MFA Connect to Security & Compliance
# Launch Microsoft Exchange Online Powershell Module (requires download)
#https://docs.microsoft.com/en-us/powershell/exchange/office-365-scc/connect-to-scc-powershell/mfa-connect-to-scc-powershell?view=exchange-ps
#Connect-IPPSSession -UserPrincipalName <UPN>
# I suppose could try using $Session = Connect-IPPSSession -UserPrincipalName <UPN>
# Makes it easier to Remove-PSSession via $Session rather than getting the -Id

# NO MFA Connect to Exchange-Online
# https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/connect-to-exchange-online-powershell?view=exchange-ps
Set-ExecutionPolicy -Scope process -ExecutionPolicy RemoteSigned
# Remember to use your UPN for auth
$UserCredential = Get-Credential
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionURI https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection
Import-PSSession $Session
# Do things
# When done doing things
Remove-PSSession $Session

##############################################################
# Things to work on (comments, etc all need to be improved)

# I'm working on this one still

foreach ($i in (Get-Mailbox -ResultSize unlimited)) { Get-InboxRule -Mailbox $i.DistinguishedName | where {$_.ReDirectTo} | fl MailboxOwnerID,Name,RedirectTo >> C:\Temp\Redirect_Rule.txt }

# Try this, can swap out the Format-Table at the end for Export-Csv to have an output csv file instead of output to stdout
# Get-Mailbox -resultsize unlimited | Where {$_.ForwardingsmtpAddress -ne $null} | Select Name, PrimarySMTPAddress, ForwardingAddress, ForwardingSMTPAddress, DeliverToMailboxAndForward | Format-Table -AutoSize -Wrap

# This is going to be super slow as it will be rate-limited by O365, up until the resultsize max is reached since
# -resultsize unlimited isn't specified
# Get-Mailbox | select UserPrincipalName,ForwardingSmtpAddress,DeliverToMailboxAndForward | Export-csv c:\temp\forwards.csv -NoTypeInformation

# These should be faster, as they're only checking for mailboxes where there is something set for ForwardingSMTPAddress
# Not quite the same as having an InboxRule though
Get-Mailbox -resultsize unlimited | Where {$_.ForwardingsmtpAddress -ne $null} | Select Name, PrimarySMTPAddress, ForwardingAddress, forwardingsmtpaddress, DeliverToMailboxAndForward | ft -autosize -wrap

# These two loops just 1) prove there's output and 2) only gets the inbox rules from those mailboxes that have something set in ForwardingSMTPAddress
foreach ($i in (Get-Mailbox -ResultSize unlimited | Where {$_.ForwardingsmtpAddress -ne $null} )) { Get-InboxRule -Mailbox $i.DistinguishedName | ft -autosize -wrap}
foreach ($i in (Get-Mailbox -ResultSize unlimited | Where {$_.ForwardingsmtpAddress -ne $null} )) { Get-InboxRule -Mailbox $i.DistinguishedName | where {$_.ForwardTo} | ft -autosize -wrap}
# Might be better to just pull the rules from mailboxes where DeliverToMailboxAndForward are True?

# This should probably have something that includes the date, and sets the name of the file with some of that data like YYYYMMDD
# foreach ($i in (Get-Mailbox -ResultSize unlimited)) { Get-InboxRule -Mailbox $i.DistinguishedName | where {$_.ForwardTo} | fl MailboxOwnerID,Name,ForwardTo >> C:\Temp\Forward_Rule.txt }

# Variation to include RedirectTo as well, to get them both in one pass
# Also, it might work better as a csv via Export-Csv
# foreach ($i in (Get-Mailbox -ResultSize unlimited)) { Get-InboxRule -Mailbox $i.DistinguishedName | where {($_.ForwardTo -ne $null) -or ($_.RedirectTo -ne $null)} | fl MailboxOwnerID,Name,ForwardTo,RedirectTo >> C:\Temp\Forward_Rule.txt }
# foreach ($i in (Get-Mailbox -ResultSize unlimited)) { Get-InboxRule -Mailbox $i.DistinguishedName | where {($_.ForwardTo -ne $null) -or ($_.RedirectTo -ne $null)} | select mailboxownerid,name,enabled,description,forwardto,redirectto| fl}

# See all console colors, foreground and background
([System.Enum]::getvalues([System.ConsoleColor])) | foreach {write-host $_ -ForegroundColor $_; write-host $_ -BackgroundColor $_}
